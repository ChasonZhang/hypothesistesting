# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# 可视化
hist(mtcars$mpg, main = "汽车油耗分布", xlab = "油耗(mpg)")
abline(v = 20, col = "red", lwd = 2)
# 可视化
hist(mtcars$mpg, main = "汽车油耗分布", xlab = "油耗(mpg)")
abline(v = 20, col = "red", lwd = 2)
# 绘制油耗分布直方图
hist(mtcars$mpg, main = "汽车油耗分布", xlab = "油耗(mpg)",
family = "Microsoft YaHei")
warnings()
# 查看可用的字体
systemfonts::list_fonts()
# 绘制油耗分布直方图
hist(mtcars$mpg, main = "汽车油耗分布", xlab = "油耗(mpg)",
family = "SimSun")
# 绘制油耗分布直方图
hist(mtcars$mpg, main = "汽车油耗分布", xlab = "油耗(mpg)",
family = "Microsoft YaHei")
# 加载系统字体包
library(systemfonts)
# 绘制油耗分布直方图
hist(mtcars$mpg, main = "汽车油耗分布", xlab = "油耗(mpg)",
family = "Microsoft YaHei")
# 绘制油耗分布直方图，使用ggplot2
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "blue", color = "black") +
labs(title = "汽车油耗分布", x = "油耗(mpg)", y = "频数") +
theme(text = element_text(family = "Microsoft YaHei"))
# 加载ggplot2包
library(ggplot2)
# 绘制油耗分布直方图，使用ggplot2
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "blue", color = "black") +
labs(title = "汽车油耗分布", x = "油耗(mpg)", y = "频数") +
theme(text = element_text(family = "Microsoft YaHei"))
# 绘制油耗分布直方图，使用ggplot2
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "#ff8c00", color = "black") +
labs(title = "汽车油耗分布", x = "油耗(mpg)", y = "频数") +
theme(text = element_text(family = "Microsoft YaHei"))
# 加载系统字体包
library(systemfonts)
# 加载ggplot2包
library(ggplot2)
# 加载系统字体包
library(systemfonts)
# 加载ggplot2包
library(ggplot2)
# 加载ggtext包
library(ggtext)
install.packages(ggtext)
install.packages("ggtext")
# 加载系统字体包
library(systemfonts)
# 加载ggplot2包
library(ggplot2)
# 加载ggtext包
library(ggtext)
# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# 查看可用的字体
systemfonts::list_fonts()
# 绘制油耗分布直方图，使用ggplot2
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "#ff8c00", color = "black") +
labs(title = "汽车油耗分布", x = "油耗(mpg)", y = "频数") +
theme(text = element_text(family = "Microsoft YaHei"))
# 查看可用的字体
systemfonts::list_fonts()
# 加载系统字体包
library(systemfonts)
# 加载ggplot2包
library(ggplot2)
# 加载ggtext包
library(ggtext)
# 查看可用的字体
systemfonts::list_fonts()
system_fonts()
# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# 绘制油耗分布直方图，使用ggplot2
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "#ff8c00", color = "black") +
labs(title = "汽车油耗分布", x = "油耗(mpg)", y = "频数") +
theme_minimal() +
theme(text = element_text(family = "SimSun"))
# 加载系统字体包（如果有问题可以注释掉相关字体设置）
library(systemfonts)
library(ggplot2)
library(ggtext)
# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# 计算平均值用于绘图
mean_mpg <- mean(mtcars$mpg)
mu_value <- 20
# 绘制油耗分布直方图，使用ggplot2
p <- ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "#ff8c00", color = "black") +
geom_vline(xintercept = mu_value, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = mean_mpg, color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mu_value + 1, y = 7, label = "假设均值 = 20", color = "red") +
annotate("text", x = mean_mpg + 1, y = 6, label = paste("样本均值 =", round(mean_mpg, 2)), color = "blue") +
labs(title = "汽车油耗分布",
subtitle = paste("单样本t检验: p-value =", round(t_test_result$p.value, 4)),
x = "油耗(mpg)",
y = "频数",
caption = "数据来源：mtcars数据集") +
theme_minimal()
# 显示图形
print(p)
# 加载必要的包
library(ggplot2)
library(showtext)
# 设置中文显示
# Mac系统使用showtext包处理中文
font_add("SimSun", "SimSun") # 添加宋体，如果Mac上没有这个字体可能会报错
showtext_auto() # 自动使用showtext渲染
# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# 计算平均值用于绘图
mean_mpg <- mean(mtcars$mpg)
mu_value <- 20
# 绘制油耗分布直方图，使用ggplot2
p <- ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "#ff8c00", color = "black") +
geom_vline(xintercept = mu_value, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = mean_mpg, color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mu_value + 1, y = 7, label = "Hypo Mean = 20", color = "red") +
annotate("text", x = mean_mpg + 1, y = 6, label = paste("Sample Mean =", round(mean_mpg, 2)), color = "blue") +
labs(title = "Car Mileage Distribution",
subtitle = paste("One-sample t-test: p-value =", round(t_test_result$p.value, 4)),
x = "Mileage (mpg)",
y = "Count",
caption = "Data Source: mtcars dataset") +
theme_minimal()
# 显示图形
print(p)
# 加载必要的包
library(ggplot2)
library(showtext)
# 设置中文显示
# Mac系统使用showtext包处理中文
font_add("SimSun", "SimSun") # 添加宋体，如果Mac上没有这个字体可能会报错
showtext_auto() # 自动使用showtext渲染
# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# 检查正态性
shapiro_test <- shapiro.test(mtcars$mpg)
print(shapiro_test)
# 创建QQ图检查正态性
qqnorm(mtcars$mpg)
# 创建QQ图检查正态性
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col = "red")
# 检查正态性
shapiro_test <- shapiro.test(mtcars$mpg)
print(shapiro_test)
# 创建QQ图检查正态性
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col = "red")
# 4. 执行检验步骤
#  计算样本平均值
mean_mpg <- mean(mtcars$mpg)
cat("样本平均值:", mean_mpg, "\n")
#  计算样本标准差
sd_mpg <- sd(mtcars$mpg)
cat("样本标准差:", sd_mpg, "\n")
#  计算标准误(SE = s/√n)
se_mpg <- sd_mpg / sqrt(n)
cat("标准误:", se_mpg, "\n")
#  计算t统计量: t = (x̄ - μ₀)/SE
mu0 <- 20 # 假设的总体均值
t_stat <- (mean_mpg - mu0) / se_mpg
cat("t统计量:", t_stat, "\n")
#  确定自由度: df = n - 1
df <- n - 1
cat("自由度:", df, "\n")
#  计算p值
p_value <- 2 * pt(abs(t_stat), df, lower.tail = FALSE)
cat("p值:", p_value, "\n")
# 查看样本量
n <- length(mtcars$mpg)
cat("样本量:", n, "\n")
# 4. 执行检验步骤
#  计算样本平均值
mean_mpg <- mean(mtcars$mpg)
cat("样本平均值:", mean_mpg, "\n")
# 查看样本量
n <- length(mtcars$mpg)
cat("样本量:", n, "\n")
# 4. 执行检验步骤
#  计算样本平均值
mean_mpg <- mean(mtcars$mpg)
cat("样本平均值:", mean_mpg, "\n")
#  计算样本标准差
sd_mpg <- sd(mtcars$mpg)
cat("样本标准差:", sd_mpg, "\n")
#  计算标准误(SE = s/√n)
se_mpg <- sd_mpg / sqrt(n)
cat("标准误:", se_mpg, "\n")
#  计算t统计量: t = (x̄ - μ₀)/SE
mu0 <- 20 # 假设的总体均值
t_stat <- (mean_mpg - mu0) / se_mpg
cat("t统计量:", t_stat, "\n")
#  确定自由度: df = n - 1
df <- n - 1
cat("自由度:", df, "\n")
#  计算p值
p_value <- 2 * pt(abs(t_stat), df, lower.tail = FALSE)
cat("p值:", p_value, "\n")
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
#  计算p值
p_value <- 2 * pt(abs(t_stat), df, lower.tail = FALSE)
cat("p值:", p_value, "\n")
View(mtcars)
# pwr包用于功效分析
library(pwr)
# 检查样本量是否足够大
# 1. 经验法则: 通常样本量n≥30被认为足够大，可以应用中心极限定理
n <- length(mtcars$mpg)
cat("样本量:", n, "\n")
if(n >= 30) {
cat("根据经验法则(n≥30)，样本量足够大，可以应用中心极限定理\n")
} else {
cat("样本量小于30，需要更严格地检验正态性假设\n")
}
# 2. 计算标准误，评估估计精度
sd_mpg <- sd(mtcars$mpg)
se_mpg <- sd_mpg/sqrt(n)
cat("标准误(SE):", se_mpg, "\n")
cat("相对标准误(SE/平均值):", se_mpg/mean(mtcars$mpg), "\n")
# 3. 功效分析 - 计算样本量对检测给定效应量的能力
# 假设我们想要检测的效应量d=0.5(中等效应)，显著性水平α=0.05，功效(1-β)=0.8
effect_size <- 0.5  # 中等效应量
power_val <- 0.8    # 常用功效值
alpha <- 0.05       # 显著性水平
required_n <- pwr.t.test(d = effect_size, sig.level = alpha, power = power_val, type = "one.sample")$n
# pwr包用于功效分析
library(pwr)
install.packages("pwr")
# pwr包用于功效分析
library(pwr)
# 3. 功效分析 - 计算样本量对检测给定效应量的能力
# 假设我们想要检测的效应量d=0.5(中等效应)，显著性水平α=0.05，功效(1-β)=0.8
effect_size <- 0.5  # 中等效应量
power_val <- 0.8    # 常用功效值
alpha <- 0.05       # 显著性水平
required_n <- pwr.t.test(d = effect_size, sig.level = alpha, power = power_val, type = "one.sample")$n
cat("为检测效应量d=", effect_size, "，需要的样本量约为:", ceiling(required_n), "\n")
# 4. 当前样本的功效分析
actual_effect <- abs(mean(mtcars$mpg) - 20) / sd_mpg  # 实际效应量
actual_power <- pwr.t.test(d = actual_effect, n = n, sig.level = alpha, type = "one.sample")$power
cat("对于当前效应量d=", round(actual_effect, 4), "，实际功效为:", round(actual_power, 4), "\n")
# 3. 功效分析 - 计算样本量对检测给定效应量的能力
# 假设我们想要检测的效应量d=0.5(中等效应)，显著性水平α=0.05，功效(1-β)=0.8
effect_size <- 0.5  # 中等效应量
power_val <- 0.8    # 常用功效值
alpha <- 0.05       # 显著性水平
required_n <- pwr.t.test(d = effect_size, sig.level = alpha, power = power_val, type = "one.sample")$n
cat("为检测效应量d=", effect_size, "，需要的样本量约为:", ceiling(required_n), "\n")
# 4. 当前样本的功效分析
actual_effect <- abs(mean(mtcars$mpg) - 20) / sd_mpg  # 实际效应量
actual_power <- pwr.t.test(d = actual_effect, n = n, sig.level = alpha, type = "one.sample")$power
cat("对于当前效应量d=", round(actual_effect, 4), "，实际功效为:", round(actual_power, 4), "\n")
# 加载必要的包
library(ggplot2)
library(showtext)
# pwr包用于功效分析
library(pwr)
# 设置中文显示
# Mac系统使用showtext包处理中文
font_add("SimSun", "SimSun") # 添加宋体，如果Mac上没有这个字体可能会报错
# 设置中文显示
# 使用Mac系统自带的中文字体
font_add("Heiti SC", "/System/Library/Fonts/STHeiti Light.ttc") # 黑体-简
# 或者尝试
# font_add("PingFang SC", "/System/Library/Fonts/PingFang.ttc") # 苹方字体
showtext_auto()
# 加载数据
data(mtcars)
# 查看数据结构
str(mtcars)
summary(mtcars$mpg)
# 检查正态性
shapiro_test <- shapiro.test(mtcars$mpg)
print(shapiro_test)
# 创建QQ图检查正态性
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col = "red")
# 检查样本量是否足够大
# 1. 经验法则: 通常样本量n≥30被认为足够大，可以应用中心极限定理
n <- length(mtcars$mpg)
cat("样本量:", n, "\n")
if(n >= 30) {
cat("根据经验法则(n≥30)，样本量足够大，可以应用中心极限定理\n")
} else {
cat("样本量小于30，需要更严格地检验正态性假设\n")
}
# 2. 计算标准误，评估估计精度
sd_mpg <- sd(mtcars$mpg)
se_mpg <- sd_mpg/sqrt(n)
cat("标准误(SE):", se_mpg, "\n")
cat("相对标准误(SE/平均值):", se_mpg/mean(mtcars$mpg), "\n")
# 3. 功效分析 - 计算样本量对检测给定效应量的能力
# 假设我们想要检测的效应量d=0.5(中等效应)，显著性水平α=0.05，功效(1-β)=0.8
effect_size <- 0.5  # 中等效应量
power_val <- 0.8    # 常用功效值
alpha <- 0.05       # 显著性水平
required_n <- pwr.t.test(d = effect_size, sig.level = alpha, power = power_val, type = "one.sample")$n
cat("为检测效应量d=", effect_size, "，需要的样本量约为:", ceiling(required_n), "\n")
# 4. 当前样本的功效分析
actual_effect <- abs(mean(mtcars$mpg) - 20) / sd_mpg  # 实际效应量
actual_power <- pwr.t.test(d = actual_effect, n = n, sig.level = alpha, type = "one.sample")$power
cat("对于当前效应量d=", round(actual_effect, 4), "，实际功效为:", round(actual_power, 4), "\n")
# 计算样本量
n <- length(mtcars$mpg)
cat("样本量:", n, "\n")
#  计算样本平均值
mean_mpg <- mean(mtcars$mpg)
cat("样本平均值:", mean_mpg, "\n")
#  计算样本标准差
sd_mpg <- sd(mtcars$mpg)
cat("样本标准差:", sd_mpg, "\n")
#  计算标准误(SE = s/√n)
se_mpg <- sd_mpg / sqrt(n)
cat("标准误:", se_mpg, "\n")
#  计算t统计量: t = (x̄ - μ₀)/SE
mu0 <- 20 # 假设的总体均值
t_stat <- (mean_mpg - mu0) / se_mpg
cat("t统计量:", t_stat, "\n")
#  确定自由度: df = n - 1
df <- n - 1
cat("自由度:", df, "\n")
#  计算p值
p_value <- 2 * pt(abs(t_stat), df, lower.tail = FALSE)
cat("p值:", p_value, "\n")
# 进行单样本t检验
t_test_result <- t.test(mtcars$mpg, mu = 20)
print(t_test_result)
# data:  mtcars$mpg
# t = 0.08506, df = 31, p-value = 0.9328
# alternative hypothesis: true mean is not equal to 20
# 95 percent confidence interval:
#  17.91768 22.26357
# sample estimates:
# mean of x
#  20.09062
# 计算平均值用于绘图
mean_mpg <- mean(mtcars$mpg)
mu_value <- 20
# 绘制油耗分布直方图，使用ggplot2
p <- ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bins = 10, fill = "#ff8c00", color = "black") +
geom_vline(xintercept = mu_value, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = mean_mpg, color = "blue", linetype = "solid", size = 1) +
annotate("text", x = mu_value + 1, y = 7, label = "Hypo Mean = 20", color = "red") +
annotate("text", x = mean_mpg + 1, y = 6, label = paste("Sample Mean =", round(mean_mpg, 2)), color = "blue") +
labs(title = "Car Mileage Distribution",
subtitle = paste("One-sample t-test: p-value =", round(t_test_result$p.value, 4)),
x = "Mileage (mpg)",
y = "Count",
caption = "Data Source: mtcars dataset") +
theme_minimal()
# 显示图形
print(p)
install.packages("effectplots")
install.packages("pak")
library(effectplots)    # 用于绘制效应图
library(OpenML)          # 用于加载数据
install.packages("OpenML")
library(effectplots)    # 用于绘制效应图
library(OpenML)          # 用于加载数据
library(lightgbm)        # 用于训练模型
library(lightgbm)        # 用于训练模型
install.packages("lightgbm")
library(effectplots)    # 用于绘制效应图
library(OpenML)          # 用于加载数据
library(lightgbm)        # 用于训练模型
set.seed(1)
# 加载数据
df <- getOMLDataSet(data.id = 45106L)$data
library(effectplots)    # 用于绘制效应图
library(OpenML)          # 用于加载数据
library(lightgbm)        # 用于训练模型
set.seed(1)
# 加载数据
df <- getOMLDataSet(data.id = 45106L)$data
library(effectplots)    # 用于绘制效应图
library(OpenML)          # 用于加载数据
library(lightgbm)        # 用于训练模型
set.seed(1)
# 加载数据
df <- getOMLDataSet(data.id = 45106L)$data
library(effectplots)    # 用于绘制效应图
library(OpenML)          # 用于加载数据
library(lightgbm)        # 用于训练模型
set.seed(1)
# 加载数据
df <- getOMLDataSet(data.id = 45106L)$data
- **研究问题**：手动挡(am=1)和自动挡(am=0)汽车的平均油耗(mpg)是否有显著差异
# 加载数据集
data(mtcars)
# 查看数据结构
str(mtcars)
# 将am转换为因子变量，便于后续分析
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("自动挡", "手动挡")
# 查看分组的基本描述统计量
tapply(mtcars$mpg, mtcars$am, summary)
tapply(mtcars$mpg, mtcars$am, sd)
# 分组进行正态性检验
shapiro.test(mtcars$mpg[mtcars$am == "自动挡"])
shapiro.test(mtcars$mpg[mtcars$am == "手动挡"])
# 绘制Q-Q图检查正态性
par(mfrow = c(1, 2))
qqnorm(mtcars$mpg[mtcars$am == "自动挡"], main = "自动挡Q-Q图")
qqline(mtcars$mpg[mtcars$am == "自动挡"], col = "red")
qqnorm(mtcars$mpg[mtcars$am == "手动挡"], main = "手动挡Q-Q图")
qqline(mtcars$mpg[mtcars$am == "手动挡"], col = "red")
# 使用leveneTest进行方差齐性检验
library(car)
leveneTest(mpg ~ am, data = mtcars)
# 或使用var.test进行F检验
var.test(mpg ~ am, data = mtcars)
# 如果方差齐性假设成立，使用等方差t检验
t.test(mpg ~ am, data = mtcars, var.equal = TRUE)
# 如果方差齐性假设不成立，使用Welch校正的t检验（不等方差）
t.test(mpg ~ am, data = mtcars, var.equal = FALSE)
# 箱线图比较两组
boxplot(mpg ~ am, data = mtcars,
xlab = "变速器类型", ylab = "平均油耗(mpg)",
main = "手动挡与自动挡汽车的平均油耗比较")
# 添加均值点和95%置信区间
library(gplots)
install.packages("gplots")
# 添加均值点和95%置信区间
library(gplots)
plotmeans(mpg ~ am, data = mtcars,
xlab = "变速器类型", ylab = "平均油耗(mpg)",
main = "手动挡与自动挡汽车的平均油耗均值比较(95%置信区间)")
# 密度图
library(ggplot2)
ggplot(mtcars, aes(x = mpg, fill = am)) +
geom_density(alpha = 0.5) +
labs(title = "手动挡与自动挡汽车的油耗分布对比",
x = "平均油耗(mpg)", y = "密度") +
theme_classic()
